AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 

    This base template deploys the backend stack for a RoboMaker application. 
Globals:
  Function:
    Timeout: 3
Parameters:

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.168.0.0/16
    
    VpcEnableDnsHostames:
        Description: Enable DNS Hostnames
        Type: String
        Default: true
        AllowedValues: [true, false]
        
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.168.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.168.11.0/24

    SimulationApplicationRenderingEngine:
        Description: The rendering engine to use with the simulation application
        Type: String
        Default: OGRE

    SimulationApplicationRenderingEngineVersion:
        Description: The rendering engine to use with the simulation application version
        Type: String
        Default: 1.x

    SimulationApplicationROSSoftwareSuite:
        Description: Software suite for the simulation application
        Type: String
        Default: ROS  

    SimulationApplicationSimulationSoftwareSuite:
        Description: Simulaton software suite for the simulation application
        Type: String
        Default: Gazebo       

    SimulationApplicationSimulationSoftwareSuiteVersion:
        Description: Simulaton software suite version for the simulation application
        Type: String
        Default: "9"

    SimulationApplicationROSRelease:
        Description: Software suite for the simulation application
        Type: String
        Default: Melodic 

    SimulationApplicationS3Key:
        Description: Location of bundle within S3.
        Type: String
        Default: cr2multirobot/bundle/output.tar

    ScenarioDefinitionDocument:
        Description: Please enter the filename for the scenario definition document used to define scenarios to launch.
        Type: String
        Default: "scenarios.json"
 
    LambdaS3Bucket:
        Description: Please enter the bucketname for lambdas
        Type: String
        Default: yfedi-test-bucket
        
Resources:

    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: !Ref VpcEnableDnsHostames
            Tags: 
                - Key: Name 
                  Value: !Ref AWS::StackName

    SimulationApplication: 
        Type: AWS::RoboMaker::SimulationApplication
        Properties:
            RenderingEngine: 
                Name: !Ref SimulationApplicationRenderingEngine
                Version: !Ref SimulationApplicationRenderingEngineVersion
            RobotSoftwareSuite: 
                Name: !Ref SimulationApplicationROSSoftwareSuite
                Version: !Ref SimulationApplicationROSRelease
            SimulationSoftwareSuite: 
                Name: !Ref SimulationApplicationSimulationSoftwareSuite
                Version: !Ref SimulationApplicationSimulationSoftwareSuiteVersion
            Sources: 
              - Architecture: X86_64
                S3Bucket: !Ref LambdaS3Bucket
                S3Key: "bundles/x86/simulationApp.tar"
            Tags:
                "Name" : "SimulationApplication"
                "Type" : "CICD_Auto_Generate"  
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref AWS::StackName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    RoboMakerBasicS3Bucket:
        Type: AWS::S3::Bucket

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${AWS::StackName} ${AWS::Region} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${AWS::StackName} ${AWS::Region} Public Subnet (AZ2)

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${AWS::StackName} ${AWS::Region} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    RoboMakerSimulationRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                -
                    Effect: Allow
                    Principal:
                        Service:
                        - robomaker.amazonaws.com
                        - lambda.amazonaws.com
                        - ec2.amazonaws.com
                    Action:
                        - sts:AssumeRole
            Policies:
                - 
                    PolicyName: !Sub robomaker-multi-robot-fleet-simulation-inline-policy-${AWS::Region}
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                        -
                            Effect: Allow
                            Resource: 
                            - !Join ['',['arn:aws:s3:::',!Ref RoboMakerBasicS3Bucket]]
                            - !Join ['',['arn:aws:s3:::',!Ref RoboMakerBasicS3Bucket,'/*' ]]
                            - !Join ['',['arn:aws:s3:::',"yfedi-test-bucket"]]
                            - !Join ['',['arn:aws:s3:::','yfedi-test-bucket/*']]
                            Action:
                            - s3:List*
                            - s3:Get*
                            - s3:Put*
                            - s3:DeleteObject
                        - 
                            Effect: Allow
                            Resource:
                            - !Join [':',['arn:aws:logs', !Ref "AWS::Region", !Ref "AWS::AccountId", 'log-group:/aws/robomaker/SimulationJobs*']]
                            Action:
                            - logs:CreateLogGroup
                            - logs:CreateLogStream
                            - logs:PutLogEvents
                            - logs:DescribeLogStreams
                        - 
                            Effect: Allow
                            Action:
                                - robomaker:UntagResource
                                - robomaker:ListTagsForResource
                                - robomaker:CancelSimulationJob
                                - robomaker:TagResource
                            Resource:
                            - '*'    
    #                         - !Join ['', ['arn:aws:robomaker:::simulation-job*']]
    StepFunctionsLambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: Allow
                    Principal:
                        Service:
                        - lambda.amazonaws.com
                        - states.amazonaws.com
                    Action:
                        - sts:AssumeRole
            Policies:
            - 
                PolicyName: StepFunctionsLambdaPolicy
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:  
                    - 
                        Effect: Allow
                        Action:
                        - lambda:InvokeFunction
                        - codepipeline:PollForJobs
                        - s3:GetAccessPoint
                        - s3:GetObject
                        - xray:PutTraceSegments
                        - cloudwatch:PutMetricData
                        - robomaker:DescribeSimulationJobBatch
                        - robomaker:BatchDescribeSimulationJob
                        - robomaker:DescribeRobotApplication
                        - robomaker:CreateSimulationJob
                        - codepipeline:PutThirdPartyJobFailureResult
                        - logs:CreateLogStream
                        - codepipeline:PutJobFailureResult
                        - s3:HeadBucket
                        - codepipeline:PutThirdPartyJobSuccessResult
                        - s3:PutAccountPublicAccessBlock
                        - s3:ListAccessPoints
                        - codepipeline:PutJobSuccessResult
                        - robomaker:DescribeSimulationApplication
                        - s3:ListJobs
                        - logs:CreateLogGroup
                        - logs:PutLogEvents
                        - logs:DescribeLogGroups
                        - robomaker:StartSimulationJobBatch
                        - robomaker:DescribeSimulationJob
                        - robomaker:ListSimulationJobBatches
                        - robomaker:TagResource
                        - s3:GetAccountPublicAccessBlock
                        - codepipeline:PutApprovalResult
                        - s3:ListAllMyBuckets
                        - s3:CreateJob
                        - iam:CreateServiceLinkedRole
                        Resource: '*'
                    - 
                        Effect: Allow
                        Action: 
                        - iam:PassRole
                        - iam:AddRoleToInstanceProfile
                        Resource: !GetAtt RoboMakerSimulationRole.Arn
                    - 
                        Effect: Allow
                        Action: states:StartExecution
                        Resource: '*'
                    - 
                        Effect: Allow
                        Action:
                        - s3:*
                        Resource:
                        - Fn::GetAtt: RoboMakerBasicS3Bucket.Arn
            RoleName: !Sub yfedi-step-functions-batch-role-${AWS::Region}
    ProcessAndLaunchBatchSimulationsFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri:
                Bucket: !Ref LambdaS3Bucket
                Key: lambdas/processAndLaunchBatchSimulations/function.zip
            Handler: app.lambda_handler
            Runtime: python3.8
            Role: !GetAtt StepFunctionsLambdaRole.Arn
            Tracing: Active
            Environment:
                Variables:
                  S3_BUCKET: !Ref RoboMakerBasicS3Bucket
                  SIMULATION_APP_ARN: !Ref SimulationApplication
                  IAM_ROLE: !GetAtt RoboMakerSimulationRole.Arn
                  SUBNET_1: !Ref PublicSubnet1
                  SUBNET_2: !Ref PublicSubnet2
                  SECURITY_GROUP: !GetAtt VPC.DefaultSecurityGroup
    CheckStatusFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri:
                Bucket: !Ref LambdaS3Bucket
                Key: lambdas/checkStatus/function.zip
            Handler: app.lambda_handler
            Runtime: python3.8
            Tracing: Active
            Role: !GetAtt StepFunctionsLambdaRole.Arn
    SendSimSummaryFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri:
                Bucket: !Ref LambdaS3Bucket
                Key: lambdas/sendSimSummary/function.zip
            Handler: app.lambda_handler
            Runtime: python3.8
            Tracing: Active
            Role: !GetAtt StepFunctionsLambdaRole.Arn
    ErrorLaunchingSimulationsFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri:
                Bucket: !Ref LambdaS3Bucket
                Key: lambdas/errorLaunchingSimulations/function.zip
            Handler: app.lambda_handler
            Runtime: python3.8
            Tracing: Active
            Role: !GetAtt StepFunctionsLambdaRole.Arn  
      
    TriggerStepFunctions:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri:
                Bucket: !Ref LambdaS3Bucket
                Key: lambdas/triggerStepFunctions/function.zip
            Handler: app.lambda_handler
            Runtime: python3.8
            Role: !GetAtt StepFunctionsLambdaRole.Arn
            Tracing: Active
            Environment:
                Variables:
                    STATE_MACHINE_ARN: !Ref SimulationRunnerStepFunction
                    SCENARIO_DEFINITIONS_FILENAME: !Ref ScenarioDefinitionDocument   
    
    SimulationRunnerStepFunction:
        Type: AWS::StepFunctions::StateMachine
        DependsOn:
            - SendSimSummaryFunction
            - CheckStatusFunction
            - ProcessAndLaunchBatchSimulationsFunction
        Properties:
            DefinitionString: 
                !Sub |-        
                 {
                    "StartAt": "ProcessAndLaunchBatchSimulations",
                        "States": {
                          "ProcessAndLaunchBatchSimulations": {
                            "Type": "Task",
                            "Resource": "${ProcessAndLaunchBatchSimulationsFunction.Arn}",
                            "Next": "IsBatchSimRunning",
                            "Catch": [ {
                              "ErrorEquals": ["States.ALL"],
                              "Next": "ErrorLaunchingSimulations",
                              "ResultPath": "$.error"
                             } ]
                          },
                          "IsBatchSimRunning": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                  "Variable": "$.isDone",
                                  "BooleanEquals": true,
                                  "Next": "SendSimSummary"
                              }
                            ],
                            "Default": "Wait"
                            },
                            "Wait": {
                                "Type": "Wait",
                                "Seconds": 30,
                                "Next": "CheckStatus"
                            },
                            "CheckStatus": {
                              "Type": "Task",
                              "Resource": "${CheckStatusFunction.Arn}",
                              "InputPath": "$",
                              "Next": "IsBatchSimRunning",
                              "Catch": [ {
                                "ErrorEquals": ["States.ALL"],
                                "Next": "ErrorLaunchingSimulations",
                                "ResultPath": "$.error"
                               } ]
                            },
                            "SendSimSummary": {
                              "Type": "Task",
                              "InputPath": "$",
                              "Resource": "${SendSimSummaryFunction.Arn}",
                              "Catch": [ {
                                "ErrorEquals": ["States.ALL"],
                                "Next": "ErrorLaunchingSimulations",
                                "ResultPath": "$.error"
                               } ],
                              "End": true
                            },
                            "ErrorLaunchingSimulations": {
                               "Type": "Task",
                               "InputPath": "$",
                               "Resource": "${ErrorLaunchingSimulationsFunction.Arn}",
                               "ResultPath": "$.error",
                               "End": true
                            }
                      }
                  }
            RoleArn: !GetAtt StepFunctionsLambdaRole.Arn
            StateMachineName:
                Fn::Sub: SimulationRunnerStateMachine-${AWS::StackName}
        
Outputs: 

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC

    DefaultSecurityGroupID: 
        Description: The default security group created with the VPC
        Value: !GetAtt VPC.DefaultSecurityGroup

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

    PublicSubnet2: 
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2
  
    RoboMakerS3Bucket:
        Description: The S3 bucket used to store your AWS RoboMaker assets.
        Value: !Ref RoboMakerBasicS3Bucket

    SimulationRole:
        Description: The IAM role that the simulation application will use to access AWS resources.
        Value: !GetAtt RoboMakerSimulationRole.Arn
        
    SimulationApplicationARN:
        Description: The IAM role that the simulation application will use to access AWS resources.
        Value: !GetAtt SimulationApplication.Arn
    